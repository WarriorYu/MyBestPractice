apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
//apply plugin: 'me.ele.lancet'
apply plugin: 'com.didichuxing.tools.droidassist'
apply from: this.rootProject.file('releaseinfo.gradle')

//引入自定义的插件
apply plugin: 'com.imooc.gradle.study'

droidAssistOptions {
    config file("droidassist.xml") //插件配置文件(必选配置,支持多配置文件)
    // 如果需要停用 DroidAssist 插件功能，可以添加 enable false 以停用插件 (可选配置)
    enable true
    // 日志输出等级：0 关闭日志输出，1 输出日志到控制台 2 输出日志到文件 3 输出日志到控制台以及日志 (可选配置)
    logLevel 1
    // 日志输出目录，当日志输出到文件时，默认的输出目录是当前 model 的 build/outputs/logs 目录 (可选配置)
    // logDir
}

buildscript { // 编译时用Aspect专门的编译器，不再使用传统的javac
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.aspectj:aspectjtools:1.8.9'
        classpath 'org.aspectj:aspectjweaver:1.8.9'
    }
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.example.mybestpractice"
        minSdkVersion 21
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        // work-runtime-ktx 2.1.0 and above now requires Java 8
        jvmTarget = "1.8"
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    sourceSets {
        main {
            // 将'res-ad'和'res-player'添加为跟res目录一样，都存放资源文件。可以来用分类资源文件
            res.srcDirs = ['src/main/res', 'src/main/res-ad', 'src/main/res-player']
        }
    }

    dataBinding {
        enabled = true
    }
}

// 以上可以不放在android闭包中，这样添加：
/*this.android.sourceSets{
    main{
        // 将'res-ad'和'res-player'添加为跟res目录一样，都存放资源文件。可以来用分类资源文件
        res.srcDirs = ['src/main/res', 'src/main/res-ad', 'src/main/res-player']
    }
}*/

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'

    // Aspectj
    implementation 'org.aspectj:aspectjrt:1.8.13'

    // okhttp3
    implementation 'com.squareup.okhttp3:okhttp:4.7.2'
    implementation "com.squareup.okhttp3:logging-interceptor:4.7.2"

    // retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'


    implementation 'org.greenrobot:eventbus:3.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'

    //utils工具集合
    implementation 'com.blankj:utilcodex:1.28.4'

    // leakcanary
    // debugImplementation because LeakCanary should only run in debug builds.
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.4'

    implementation 'me.weishu:epic:0.6.0'

    // 异步加载布局以避免界面出现卡顿。
    implementation "androidx.asynclayoutinflater:asynclayoutinflater:1.0.0"

    // 异步启动器
    implementation project(path: ':launchstarter')

    // 公共库
    implementation project(path: ':common')

//    compileOnly 'me.ele:lancet-base:1.0.6'

    def lifecycle_version = "2.2.0"
    def arch_version = "2.1.0"


    // 协程
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.3'
    // kotlin
    implementation 'androidx.core:core-ktx:1.3.2'
    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    // Lifecycles only (without ViewModel or LiveData)
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    // 支持viewmodels
    implementation "androidx.fragment:fragment-ktx:1.3.0"

    implementation 'com.google.android.material:material:1.2.1'


    // Rxjava3
    implementation 'io.reactivex.rxjava3:rxandroid:3.0.0'
    implementation 'io.reactivex.rxjava3:rxjava:3.0.0'

    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"

    // 文件下载
    implementation 'com.liulishuo.filedownloader:library:1.7.7'

}


import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

final def log = project.logger
final def variants = project.android.applicationVariants

variants.all { variant ->
    if (!variant.buildType.isDebuggable()) {
        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
        return;
    }

    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.8",
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath,
                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
        log.debug "ajc args: " + Arrays.toString(args)

        MessageHandler handler = new MessageHandler(true);
        new Main().run(args, handler);
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break;
                case IMessage.WARNING:
                    log.warn message.message, message.thrown
                    break;
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break;
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break;
            }
        }
    }
}

// 创建Task的两种方式

//方式一: 直接通过task函数去创建
/*task hellowTask1(group: 'yxbTask', description: 'task study') {
    println 'I am hellowTask1'
}*/

//方式二:通过TaskContainer去创建Task
/*this.tasks.create(name: 'hellowTask2') {
    setGroup('yxbTask')
    setDescription('task study')
    println 'I am hellowTask2'
}*/

task hellowTask(group: 'yxbTask', description: 'task study') {
    println 'I am hellowTask'
    // doFirst 在已有的默认Task之前执行，doLast在之后执行
    doFirst {
        println 'the task group is:' + group
    }
    //可以使用多个doFirst
    doFirst {}
}

hellowTask.doFirst {
    println 'the task description is:' + description
}

// 计算build执行时长
def startBuildTime, endBuildTime

// afterEvaluate 方法保证要找的Task已经配置完毕
this.afterEvaluate { Project project ->
    def preBuildTask = project.tasks.getByName('preBuild')
    preBuildTask.doFirst {
        startBuildTime = System.currentTimeMillis()
        println 'the start time is:' + startBuildTime
    }

    def endBuildTask = project.tasks.getByName('build')
    endBuildTask.doLast {
        endBuildTime = System.currentTimeMillis()
        println "the build time is ${endBuildTime - startBuildTime}"
    }
}

task taskX {
    doLast {
        println 'taskX'
    }
}
task taskY {
    doLast {
        println 'taskY'
    }
}
// taskZ 依赖taskX, taskY
task taskZ(dependsOn: [taskX, taskY]) {
    doLast {
        println 'taskZ'
    }
}

// 让taskW依赖筛选出来的以'lib'开头的task。
task lib1 {
    doLast {
        println 'lib1'
    }
}

task lib2 {
    doLast {
        println 'lib2'
    }
}

task lib3 {
    doLast {
        println 'lib3'
    }
}

task taskW {
    dependsOn this.tasks.findAll { task ->
        return task.name.startsWith('lib')
    }
    doLast {
        println 'taskW'
    }
}

// 将releases.xml文件中的发版信息，写到build/generated/release/目录里
/*task handleReleaseFile {

    def srcFile = file('releases.xml')
    def destDir = new File(this.buildDir, 'generated/release/')
    doLast {
        println '开始解析对应的xml文件'
        destDir.mkdir()
        def releases = new XmlParser().parse(srcFile)
        releases.release.each { releaseNode ->
            def versionCode = releaseNode.versionCode.text()
            def versionName = releaseNode.versionName.text()
            def versionInfo = releaseNode.versionInfo.text()
            //创建文件并写入节点数据
            def destFile = new File(destDir, "release-${versionName}.text")
            destFile.withWriter { writer ->
                writer.write("${versionName} -> ${versionCode} -> ${versionInfo}")

            }
        }

    }
}*/

//测试以上handleReleaseFile Task
/*task handleReleaseFileTest(dependsOn: handleReleaseFile) {
    doLast {
        println '输出完成'
    }
}*/


task taskA {
    doLast {
        println 'taskA'
    }
}
task taskB {
    mustRunAfter taskA
    doLast {
        println 'taskB'
    }
}
//执行顺序： taskA taskB, taskC
task taskC {
    mustRunAfter taskB
    doLast {
        println 'taskC'
    }
}
